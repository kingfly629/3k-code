#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/epoll.h>
#include <pthread.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <iostream>
using std::cout;
using std::endl;
using std::string;

#define MAX_EVENT 16
#define FD_SIZE MAX_EVENT+1
#define SERVPORT 4444

int conn_fd = -1;
int epoll_fd = -1;

void *onepoll(void *args) {
	int listen_fd = (int)(*((int*)args));
	epoll_fd = epoll_create(FD_SIZE);
	struct epoll_event ev;
	struct epoll_event epoll_events[MAX_EVENT];
	struct sockaddr_in cli_addr;
	socklen_t addrlen = sizeof(struct sockaddr_in);
	char msg[8];
	ev.data.fd = listen_fd;
	ev.events = EPOLLET|EPOLLIN;
	int ret = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listen_fd, &ev);
	if ( ret != 0 ) {
		pthread_exit(NULL);
	}

	for (; ;) {
		//block indefinitely
		int count = epoll_wait(epoll_fd, epoll_events, MAX_EVENT, -1);
		//nonblock
		//int count = epoll_wait(epoll_fd, epoll_events, MAX_EVENT, 0);
		switch (count) {
			case 0:
				cout << "nothing happen...\n";
				break;
			case -1:
				cout << "error event happen error:"<<strerror(errno)<<endl;
				break;
			default:
				//cout << "the event we expect happen count="<<count<<endl;
				break;

		}
		for (int index = 0; index < count; ++index) {
			//accept
			if (epoll_events[index].data.fd == listen_fd ) {
				//cout<<"connect from client..."<<endl;
				int conn_fd = accept(listen_fd,(struct sockaddr *)&cli_addr,&addrlen);
				ev.data.fd = conn_fd;
				ev.events = EPOLLET|EPOLLIN;
				int ret = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, conn_fd, &ev);
				if ( ret != 0 ) {
					//pthread_exit(NULL);
					perror("epoll_ctl error");
					continue;
				}
				cout<<"a new connection form client fd="<<conn_fd<<endl;
				//readable
			} else if (epoll_events[index].events & EPOLLIN) {
				cout<<"readable event happen fd="<<epoll_events[index].data.fd<<endl;
				string recv_msg;
				int conn_fd = epoll_events[index].data.fd;
				//包头：记录包体的长度
				memset(msg,0x0,sizeof(msg));
				int recv_len = read(conn_fd,msg,sizeof(msg));
				//-1- 异常
				if (recv_len < 0) {
					cout<<"recv error!"<<endl;
					perror("recv_len < 0");
					continue;
				} else if(recv_len == 0) {
					//-2- 对端关闭
					cout<<"peer dis-connnect fd="<<conn_fd<<endl;
					ev.data.fd = conn_fd;
					int ret = epoll_ctl(epoll_fd, EPOLL_CTL_DEL, conn_fd, &ev);
					if (ret != 0) {
						perror("epoll ctl error");
						continue;
					}
					close(conn_fd);
					perror("recv_len = 0");
					continue;
				}
				int body_len = atoi(msg);
				cout<<"recv head succ(fd="<<conn_fd<<") body_len:"<<body_len<<endl;
				while(1) {
					//包体
					memset(msg,0x0,sizeof(msg));
					recv_len = read(conn_fd,msg,sizeof(msg));
					//-1- 异常
					if (recv_len < 0) {
						cout<<"recv error!"<<endl;
						//non-block use
						/*if(errno == EAGAIN) {
						  break;
						  }*/
						perror("recv_len < 0");
						break;
					} else if(recv_len == 0) {
						//-2- 对端关闭
						cout<<"peer dis-connnect fd="<<conn_fd<<endl;
						ev.data.fd = conn_fd;
						int ret = epoll_ctl(epoll_fd, EPOLL_CTL_DEL, conn_fd, &ev);
						if (ret != 0) {
							//pthread_exit(NULL);
							perror("epoll ctl error");
							break;
						}
						close(conn_fd);
						//pthread_exit(NULL);
						perror("recv_len = 0");
						break;
					}

					ev.data.fd = conn_fd;
					//-3- 判断是否读完
					body_len -= recv_len;
					if (recv_len != sizeof(msg) || body_len <= 0) {	
						cout<<"recv msg succ(fd="<<conn_fd<<"):"<<msg<<endl;
						recv_msg += msg;	
						cout<<"recv msg finish(fd="<<conn_fd<<"):"<<recv_msg<<endl;
						ev.events = EPOLLET|EPOLLOUT;
						int ret = epoll_ctl(epoll_fd, EPOLL_CTL_MOD, conn_fd, &ev);
						if ( ret != 0 ) {
							//pthread_exit(NULL);
							perror("epoll ctl error read");
							break;
						}
						break;
					} else {
						cout<<"recv unfinish(fd="<<conn_fd<<"),[msg="<<msg<<",recv_len="<<recv_len<<"],continue to read!"<<endl;
						recv_msg += msg;	
						ev.events = EPOLLET|EPOLLIN;
						int ret = epoll_ctl(epoll_fd, EPOLL_CTL_MOD, conn_fd, &ev);
						if ( ret != 0 ) {
							//pthread_exit(NULL);
							perror("epoll ctl error read");
							break;
						}
					}
				}
				//writeable
			} else if (epoll_events[index].events & EPOLLOUT) {
				cout<<"writeable event happen fd="<<epoll_events[index].data.fd<<endl;
				int conn_fd = epoll_events[index].data.fd;
				memset(msg,0x0,sizeof(msg));
				//strcpy(msg,"msg from client!");
				strcpy(msg,"OK!");
				int write_len = write(conn_fd,msg,strlen(msg));
				if (write_len == -1)
				{
					cout <<"write error fd="<<conn_fd<<":"<<errno<<"-"<<strerror(errno)<<endl;
					perror("write error:");
					continue;
				} else {
					cout <<"write msg succ to fd="<<conn_fd<<endl;
				}
				ev.events = EPOLLET|EPOLLIN;
				ev.data.fd = conn_fd;
				int ret = epoll_ctl(epoll_fd, EPOLL_CTL_MOD, conn_fd, &ev);
				if ( ret != 0 ) {
					//pthread_exit(NULL);
					perror("epoll ctl error write");
					continue;
				}
			} else {
				cout<<"other events happen..."<<endl;
			}
		}
		usleep(100);
	}
}

int main(int argc,char *argv[]) 
{
	cout<<"##welcome to server##"<<endl;
	pthread_attr_t attr;
	pthread_t p_id;
	//--/usr/include/netinet/in.h
	struct sockaddr_in *myaddr = new sockaddr_in;
	myaddr->sin_family=AF_INET;
	myaddr->sin_port=htons(SERVPORT);
	myaddr->sin_addr.s_addr = INADDR_ANY;

	socklen_t s_len = sizeof(struct sockaddr_in);
	//tcp
	int fd = socket(AF_INET, SOCK_STREAM, 0);
	if (fd < 0) {
		cout<<"create socket error!"<<endl;
		return -1;
	}

	int ret = bind(fd, (struct sockaddr *)myaddr, s_len);
	if (ret != 0) {
		cout<<"bind error!"<<endl;
		return -1;
	}

	ret = listen(fd, 10);
	if (ret != 0) {
		cout<<"listen error!"<<endl;
		return -1;
	}
	pthread_t pid_1;
	pthread_create(&pid_1, NULL, &onepoll, &fd);

	//wait for thread to return
	void *s1 = NULL;
	pthread_join(pid_1,&s1);
	cout<<"Thread 1 returns:"<<(char *)s1<<endl;

	//release resource
	close(fd);
	close(conn_fd);
	close(epoll_fd);
	delete myaddr;
	return 0;
}
